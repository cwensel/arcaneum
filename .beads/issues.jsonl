{"id":"arcaneum-1","title":"Create Claude Code marketplace project structure","description":"Create the foundational directory structure and packaging setup for the Arcaneum Claude Code marketplace project. This establishes where all code lives and how components are packaged/distributed.\n\nDeliverables:\n- pyproject.toml with modern Python packaging\n- Directory structure: src/, plugins/, docs/, tests/\n- MCP server plugin scaffold\n- Installation method via uvx or pip\n- README with quick start guide\n\nThis is the foundation that all other RDRs build upon.","design":"Directory Structure:\n```\narcaneum/\n├── pyproject.toml          # Modern packaging\n├── README.md               # Quick start\n├── src/\n│   └── arcaneum/\n│       ├── __init__.py\n│       ├── server/         # MCP server core\n│       ├── indexing/       # Bulk upload logic\n│       └── search/         # Search utilities\n├── plugins/\n│   ├── qdrant-server/      # Server management plugin\n│   ├── qdrant-indexer/     # Bulk upload plugin\n│   └── qdrant-search/      # Search plugin\n├── tests/\n└── docs/\n\nInstallation:\n- uvx install arcaneum\n- pip install arcaneum\n\nMCP Plugin Discovery:\n- Each plugin has its own pyproject.toml\n- Plugins register via entry points\n- Claude Code discovers via marketplace registry","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T10:22:25.677694-07:00","updated_at":"2025-10-19T10:23:12.252341-07:00","closed_at":"2025-10-19T10:23:12.252341-07:00"}
{"id":"arcaneum-10","title":"Review Chroma embedding references and validate for Qdrant","description":"Review chroma-embedded/upload.sh and outstar-rag-requirements.md for embedding model usage patterns. Validate if these approaches apply to Qdrant or need adaptation.","notes":"Review completed. ChromaDB patterns transfer directly to Qdrant with adaptations: increase batch size to 100-200, client-side embeddings, same chunking strategies. FastEmbed equivalence needs validation.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.197068-07:00","updated_at":"2025-10-19T14:30:51.356703-07:00","closed_at":"2025-10-19T14:30:51.356705-07:00","dependencies":[{"issue_id":"arcaneum-10","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.198129-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-11","title":"Research Qdrant client-side embedding capabilities","description":"Review qdrant-client Python library source code for embedding model integration, FastEmbed support, and collection configuration options. Document features and APIs.","notes":"Research completed. Qdrant client has deep FastEmbed integration. Collection creation via create_collection() with VectorParams. Named vectors supported. HNSW config: m=16, ef_construct=100 defaults.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.256883-07:00","updated_at":"2025-10-19T14:30:51.424703-07:00","closed_at":"2025-10-19T14:30:51.424705-07:00","dependencies":[{"issue_id":"arcaneum-11","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.257786-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-12","title":"Research opensource projects for collection management","description":"Search for existing opensource tools/libraries that manage Qdrant collections with embedding models. Evaluate as replacement or inspiration (mcp-server-qdrant, qdrant-haystack, etc).","notes":"Research completed. Recommendation: Build from scratch using qdrant-client+FastEmbed (Apache 2.0). Avoid GPL-3.0 tools. Inspiration from analogrithems/qdrant-cli structure, mcp-server-qdrant patterns. Bundle QdrantUI as companion.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.315906-07:00","updated_at":"2025-10-19T14:30:51.48413-07:00","closed_at":"2025-10-19T14:30:51.484132-07:00","dependencies":[{"issue_id":"arcaneum-12","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.316823-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-13","title":"Design init vs create-collection CLI architecture","description":"Design CLI structure with init (one-time setup) and create-collection commands. Determine what belongs in init (model cache setup, server validation) vs collection creation.","notes":"Design completed. CLI structure: init (server health check, model cache setup, server config validation) and collection commands (create, list, delete, info). Collection creation includes named vectors setup, HNSW config, payload indexes. Model management: list, download, cache-info commands.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.489326-07:00","updated_at":"2025-10-19T14:31:31.235731-07:00","closed_at":"2025-10-19T14:31:31.235733-07:00","dependencies":[{"issue_id":"arcaneum-13","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.490367-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-14","title":"Write RDR-003 document","description":"Create doc/rdr/RDR-003-collection-creation.md with all research findings, design decisions, and implementation guidance.","notes":"RDR-003 document written with all sections complete. Includes metadata, problem statement, research findings, technical design, CLI architecture, configuration system, implementation examples, alternatives, trade-offs, implementation plan, validation, and references.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.645428-07:00","updated_at":"2025-10-19T14:42:26.150427-07:00","closed_at":"2025-10-19T14:42:26.150428-07:00","dependencies":[{"issue_id":"arcaneum-14","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.646477-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-15","title":"Review prior RDRs for context and design patterns","description":"Read all existing RDR files in doc/rdr/ to understand established patterns, design decisions, and technical approaches that should influence the PDF indexing RDR.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T17:01:20.384342-07:00","updated_at":"2025-10-19T17:01:39.984235-07:00","closed_at":"2025-10-19T17:01:39.984235-07:00"}
{"id":"arcaneum-16","title":"Review chroma-embedded/upload.sh for PDF processing patterns","description":"Analyze the referenced chroma-embedded/upload.sh script, specifically lines 1372-1522 (PDF extraction) and lines 269-324 (token-optimized chunking) to understand existing implementation patterns.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T17:01:20.445762-07:00","updated_at":"2025-10-19T17:03:49.096247-07:00","closed_at":"2025-10-19T17:03:49.096247-07:00"}
{"id":"arcaneum-17","title":"Review outstar-rag-requirements.md for PDF requirements","description":"Read outstar-rag-requirements.md lines 136-167 to understand the specific PDF processing requirements for this project.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T17:01:20.649422-07:00","updated_at":"2025-10-19T17:04:23.029999-07:00","closed_at":"2025-10-19T17:04:23.029999-07:00"}
{"id":"arcaneum-18","title":"Research PyMuPDF (fitz) capabilities and limitations","description":"Deep dive into PyMuPDF open source code to understand text extraction capabilities, table handling, performance characteristics, and edge cases.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T17:01:20.857278-07:00","updated_at":"2025-10-19T17:10:46.570322-07:00","closed_at":"2025-10-19T17:10:46.570322-07:00"}
{"id":"arcaneum-19","title":"Research pdfplumber capabilities and limitations","description":"Deep dive into pdfplumber open source code to understand text extraction capabilities, table handling, performance characteristics, and when it excels vs PyMuPDF.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T17:01:21.069943-07:00","updated_at":"2025-10-19T17:10:46.614683-07:00","closed_at":"2025-10-19T17:10:46.614683-07:00"}
{"id":"arcaneum-2","title":"RDR for running Qdrant server with embedding model configuration","description":"Create an RDR that defines how to run and configure a Qdrant server instance for the Arcaneum marketplace. Must address Docker vs local binary, port configuration, volume persistence, and embedding model setup.\n\nKey Design Questions:\n- Docker official image or custom build?\n- How to configure FastEmbed for client-side embeddings?\n- Volume mounting strategy for data persistence\n- Multi-model support per collection\n- gRPC vs REST API preference\n\nReferences:\n- /Users/cwensel/sandbox/outstar/research/qdrant-local/server.sh\n- outstar-rag-requirements.md sections on Qdrant (lines 82-94)","design":"Initial Design Direction (to be refined in RDR):\n\nDocker Setup:\n- Official qdrant/qdrant:latest image\n- Port 6333 (REST), 6334 (gRPC)\n- Volume: ./qdrant_storage:/qdrant/storage\n- Health checks via /health endpoint\n\nEmbedding Strategy:\n- Client-side with FastEmbed (no server modification)\n- Models: stella (1024d), modernbert (1024d), bge-large (1024d), jina-code (768d)\n- Model cache: ./models_cache/ mounted\n\nCollection Architecture:\n- One collection per (document-type, embedding-model) pair\n- Example: outstar-source-code-jinacode, outstar-pdf-stella\n- Metadata stores embedding model name for validation\n\nServer Management:\n- Start/stop/restart commands\n- Log access\n- Resource limits (4GB RAM default)","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T10:22:47.728287-07:00","updated_at":"2025-10-19T10:42:09.54722-07:00","closed_at":"2025-10-19T10:42:09.54722-07:00","dependencies":[{"issue_id":"arcaneum-2","depends_on_id":"arcaneum-1","type":"blocks","created_at":"2025-10-18T10:22:47.729248-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-20","title":"Research Tesseract OCR capabilities and integration","description":"Investigate Tesseract OCR system dependencies, language support, accuracy characteristics, confidence scoring, and Python integration patterns.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T17:01:21.288289-07:00","updated_at":"2025-10-19T17:10:46.656407-07:00","closed_at":"2025-10-19T17:10:46.656407-07:00"}
{"id":"arcaneum-21","title":"Research EasyOCR capabilities and integration","description":"Investigate EasyOCR pure Python implementation, language support, accuracy vs Tesseract, performance characteristics, and integration patterns.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T17:01:21.499887-07:00","updated_at":"2025-10-19T17:10:46.702429-07:00","closed_at":"2025-10-19T17:10:46.702429-07:00"}
{"id":"arcaneum-22","title":"Research embedding model token limits and chunking strategies","description":"Investigate token limits for stella, modernbert, and bge-large models. Understand optimal chunking strategies, overlap recommendations, and char-to-token ratios.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T17:01:21.722534-07:00","updated_at":"2025-10-19T17:16:49.241549-07:00","closed_at":"2025-10-19T17:16:49.241549-07:00"}
{"id":"arcaneum-23","title":"Research Qdrant batch upload capabilities and best practices","description":"Investigate Qdrant's batch upload API, optimal batch sizes, error handling, retry strategies, and performance characteristics for large-scale indexing.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-19T17:01:21.937547-07:00","updated_at":"2025-10-19T17:16:49.284168-07:00","closed_at":"2025-10-19T17:16:49.284168-07:00"}
{"id":"arcaneum-3","title":"RDR for CLI/plugin to create collections in Qdrant with embeddings","description":"Create an RDR for a CLI tool/MCP plugin that creates Qdrant collections with proper embedding model configuration. Must ensure model consistency across indexing and querying.\n\nKey Design Questions:\n- Collection naming convention (prefix + document type + model?)\n- How to validate model dimensions match collection vector size?\n- Metadata schema versioning strategy\n- HNSW index configuration (m, ef_construct)\n- Distance metric selection (cosine recommended)\n\nReferences:\n- outstar-rag-requirements.md lines 82-94, 213-237\n- qdrant-local collection creation patterns","design":"Initial Design Direction:\n\nCLI Interface:\n```bash\narcaneum collection create NAME \\\n  --model stella \\\n  --doc-type source-code \\\n  --distance cosine \\\n  --hnsw-m 16 \\\n  --hnsw-ef 100\n```\n\nCollection Metadata Schema:\n- embedding_model: \"stella\" | \"modernbert\" | \"bge-large\" | \"jina-code\"\n- vector_dimensions: 1024 | 768\n- doc_type: \"source-code\" | \"pdf\" | \"markdown\"\n- created_at: ISO timestamp\n- schema_version: \"1.0\"\n\nValidation:\n- Check model dimensions match vector_size\n- Prevent duplicate collection names\n- Verify server connectivity before creation\n\nModel-Dimension Mapping:\n- stella: 1024\n- modernbert: 1024  \n- bge-large: 1024\n- jina-code: 768\n\nHNSW Defaults:\n- m=16 (connections per layer)\n- ef_construct=100 (construction quality)\n- Disable during bulk upload (m=0), enable after","notes":"RDR-003 completed. Document created at doc/rdr/RDR-003-collection-creation.md with comprehensive research findings, CLI-driven configuration design, FastEmbed integration, named vectors architecture, and implementation plan. All 6 research tracks completed and documented.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-18T10:22:47.788905-07:00","updated_at":"2025-10-19T14:42:26.102007-07:00","closed_at":"2025-10-19T14:42:26.102009-07:00","external_ref":"doc/rdr/RDR-003-collection-creation.md","dependencies":[{"issue_id":"arcaneum-3","depends_on_id":"arcaneum-1","type":"blocks","created_at":"2025-10-18T10:22:47.790127-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-3","depends_on_id":"arcaneum-2","type":"blocks","created_at":"2025-10-18T10:22:47.790722-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-4","title":"RDR for bulk indexing PDF files with OCR support","description":"Create an RDR for bulk PDF indexing with OCR support, adapted from chroma-embedded/upload.sh. Must handle text PDFs, image PDFs, mixed PDFs, and optimize chunking for embedding models.\n\nKey Design Questions:\n- PyMuPDF vs pdfplumber for text extraction?\n- Tesseract vs EasyOCR for image PDFs?\n- When to trigger OCR (threshold for \"no text\")?\n- Chunking strategy - token-aware with model-specific sizing?\n- Batch upload size for Qdrant (100-200 chunks)?\n- Error handling for corrupt PDFs\n\nReferences:\n- chroma-embedded/upload.sh lines 1372-1522 (PDF extraction)\n- chroma-embedded/upload.sh lines 269-324 (token-optimized chunking)\n- outstar-rag-requirements.md lines 136-167 (PDF requirements)","design":"Initial Design Direction:\n\nText Extraction:\n- Primary: PyMuPDF (fitz) - 10x faster, low memory\n- Fallback: pdfplumber for complex tables\n- Trigger OCR if extracted text \u003c 100 chars\n\nOCR Strategy:\n- Default: Tesseract (faster, system dep)\n- Alternative: EasyOCR (pure Python, no system deps)\n- Multi-language support via --ocr-language flag\n- 2x image scaling for better accuracy\n- Confidence scoring to identify poor extractions\n\nChunking:\n- Model-specific token limits:\n  - stella: 460 tokens (512 limit - 10% margin)\n  - modernbert: 920 tokens (1024 limit - 10% margin)\n  - bge-large: 460 tokens (512 limit - 10% margin)\n- Char-to-token ratios per model (stella: 3.2, modernbert: 3.4)\n- 10% overlap between chunks\n\nMetadata Schema:\n- file_path, filename, file_size\n- text_extraction_method: \"pymupdf\" | \"ocr_tesseract\" | \"ocr_easyocr\"\n- is_image_pdf: boolean\n- ocr_confidence: float (0-100)\n- chunk_index, chunk_count\n- embedding_model, store_type: \"pdf\"\n\nBatch Upload:\n- 100-200 chunks per batch (Qdrant handles larger than ChromaDB)\n- Exponential backoff on failures (1s, 5s, 25s)\n- Progress reporting per file","status":"in_progress","priority":1,"issue_type":"task","created_at":"2025-10-18T10:23:19.693182-07:00","updated_at":"2025-10-19T17:01:20.321113-07:00","dependencies":[{"issue_id":"arcaneum-4","depends_on_id":"arcaneum-1","type":"blocks","created_at":"2025-10-18T10:23:19.694818-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-4","depends_on_id":"arcaneum-2","type":"blocks","created_at":"2025-10-18T10:23:19.695573-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-4","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-18T10:23:19.696087-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-5","title":"RDR for bulk indexing source code with git awareness","description":"Create an RDR for git-aware source code indexing with AST-aware chunking. Must handle 15+ languages, respect .gitignore, detect project changes via commit hash, and optimize for jina-code embeddings.\n\nKey Design Questions:\n- Git project discovery strategy (--depth control)?\n- How to integrate ASTChunk for 15+ languages?\n- Commit hash change detection - bulk delete or incremental?\n- How to handle non-git directories?\n- Fallback when ASTChunk fails?\n- Metadata schema for git info?\n\nReferences:\n- chroma-embedded/upload.sh lines 373-433 (git discovery)\n- chroma-embedded/upload.sh lines 846-976 (change detection)  \n- chroma-embedded/upload.sh lines 1743-1788 (AST chunking)\n- outstar-rag-requirements.md lines 169-176 (git tracking requirements)","design":"Initial Design Direction:\n\nGit Discovery:\n- find .git directories with optional --depth N\n- Extract: commit_hash, remote_url, branch, project_name\n- Respect .gitignore via 'git ls-files'\n- Store project_root in metadata\n\nChange Detection:\n- Compare stored commit_hash vs current\n- On mismatch: bulk delete all chunks for project, then reindex\n- Simpler than incremental diff, ensures consistency\n- SQLite checkpoint DB tracks file hashes for deduplication\n\nAST-Aware Chunking:\n- Library: ASTChunk (supports 15+ languages)\n- Languages: Python, Java, JS/TS, C#, Go, Rust, C/C++, PHP, Ruby, Kotlin, Scala, Swift\n- Preserve function/class boundaries\n- Conservative sizing: tokens * 3.2 * 0.50 safety buffer\n- Fallback to token-aware chunking if AST fails\n\nLanguage Detection:\n- Map file extension to ASTChunk language\n- .py → python, .java → java, .js/.ts → typescript, etc.\n\nMetadata Schema (extends base):\n- git_project_root, git_commit_hash, git_remote_url\n- git_branch, git_project_name\n- programming_language, file_extension\n- ast_chunked: boolean\n- has_functions, has_classes, has_imports\n- line_count, store_type: \"source-code\"\n\nChunking for jina-code:\n- 768 dimensions (different from stella/modernbert)\n- Smaller chunks: 400 tokens target\n- Minimal overlap: 5%\n\nNon-Git Handling:\n- Fall back to regular file discovery\n- No git metadata in this case\n- Still apply AST chunking by language","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-18T10:23:19.769386-07:00","updated_at":"2025-10-18T10:23:19.769386-07:00","dependencies":[{"issue_id":"arcaneum-5","depends_on_id":"arcaneum-1","type":"blocks","created_at":"2025-10-18T10:23:19.770307-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-5","depends_on_id":"arcaneum-2","type":"blocks","created_at":"2025-10-18T10:23:19.770905-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-5","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-18T10:23:19.771458-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-5","depends_on_id":"arcaneum-4","type":"blocks","created_at":"2025-10-18T10:23:19.772014-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-6","title":"RDR for plugin that runs bulk upload tools","description":"Create an RDR for an MCP plugin that orchestrates bulk uploads of PDFs and source code to Qdrant. Must integrate PDF indexing (arcaneum-4) and source code indexing (arcaneum-5) into a cohesive CLI/MCP tool.\n\nKey Design Questions:\n- MCP plugin architecture - stdio vs SSE transport?\n- CLI interface design for batch operations?\n- Progress reporting to Claude UI?\n- Error recovery strategy (checkpoint/resume)?\n- Parallel processing (multiprocessing vs asyncio)?\n- How to expose tool to Claude Code?\n\nReferences:\n- outstar-rag-requirements.md lines 179-207 (parallel indexing pipeline)\n- chroma-embedded/upload.sh overall structure as reference","design":"Initial Design Direction:\n\nMCP Plugin Structure:\n```python\n# plugins/qdrant-indexer/mcp_server.py\n@mcp.tool()\nasync def index_files(\n    input_path: str,\n    collection_name: str,\n    store_type: Literal[\"pdf\", \"source-code\", \"markdown\"],\n    embedding_model: str = \"stella\",\n    workers: int = 8\n) -\u003e dict:\n    \"\"\"Bulk index files to Qdrant collection\"\"\"\n```\n\nCLI Wrapper:\n```bash\narcaneum index \\\n  --input /path/to/files \\\n  --collection MyCollection \\\n  --store pdf \\\n  --model stella \\\n  --workers 8\n```\n\nArchitecture:\n- Main orchestrator process\n- Worker pool (8-16 based on CPU cores)\n- Python multiprocessing.Queue for job distribution\n- No Redis dependency (local only)\n\nProgress Reporting:\n- Real-time file count: processed/total\n- Throughput: docs/sec\n- Per-worker status\n- Error summary\n- Time remaining estimate\n\nError Recovery:\n- SQLite checkpoint DB\n- Resume from last successful file\n- Failed files report at end\n- Auto-retry with exponential backoff\n\nTransport:\n- Default: stdio (local Claude Code)\n- Optional: SSE on port 8000 (remote)\n\nIntegration:\n- Imports PDF indexer from arcaneum.indexing.pdf\n- Imports source code indexer from arcaneum.indexing.source_code\n- Shares common chunking/embedding logic","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-18T10:23:48.47111-07:00","updated_at":"2025-10-18T10:23:48.47111-07:00","dependencies":[{"issue_id":"arcaneum-6","depends_on_id":"arcaneum-1","type":"blocks","created_at":"2025-10-18T10:23:48.472649-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-6","depends_on_id":"arcaneum-4","type":"blocks","created_at":"2025-10-18T10:23:48.473467-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-6","depends_on_id":"arcaneum-5","type":"blocks","created_at":"2025-10-18T10:23:48.47402-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-7","title":"RDR for plugin to search Qdrant collections","description":"Create an RDR for an MCP plugin that enables semantic search across Qdrant collections from Claude Code. Must handle query embedding, metadata filtering, multi-collection search, and result formatting.\n\nKey Design Questions:\n- Query embedding generation - which model to use?\n- How to handle multi-collection search (different models)?\n- Metadata filter DSL design?\n- Result formatting for Claude UI?\n- Pagination strategy?\n- Hybrid search with full-text (future)?\n\nReferences:\n- outstar-rag-requirements.md lines 369-383 (hybrid search, multi-collection)\n- Official mcp-server-qdrant as reference","design":"Initial Design Direction:\n\nMCP Plugin Structure:\n```python\n# plugins/qdrant-search/mcp_server.py\n@mcp.tool()\nasync def search_semantic(\n    query: str,\n    collection_name: str,\n    limit: int = 10,\n    filters: dict = None\n) -\u003e list[dict]:\n    \"\"\"Semantic search in Qdrant collection\"\"\"\n```\n\nQuery Embedding:\n- Must match collection's embedding model\n- Load model from collection metadata\n- Cache loaded models for performance\n\nMulti-Collection Search:\n```python\n@mcp.tool()\nasync def search_multi_collection(\n    query: str,\n    collection_names: list[str],\n    limit: int = 10\n) -\u003e list[dict]:\n    \"\"\"Search across multiple collections, merge results\"\"\"\n```\n\nMetadata Filtering:\n```python\nfilters = {\n    \"must\": [\n        {\"key\": \"programming_language\", \"match\": {\"value\": \"python\"}},\n        {\"key\": \"git_project_name\", \"match\": {\"value\": \"my-project\"}}\n    ]\n}\n```\n\nResult Format:\n```json\n{\n    \"results\": [\n        {\n            \"score\": 0.95,\n            \"file_path\": \"/path/to/file.py:123\",\n            \"content\": \"function implementation...\",\n            \"metadata\": {\n                \"programming_language\": \"python\",\n                \"git_project_name\": \"my-project\",\n                \"chunk_index\": 5\n            },\n            \"collection\": \"outstar-source-code\"\n        }\n    ]\n}\n```\n\nCLI Wrapper:\n```bash\narcaneum search \"authentication patterns\" \\\n  --collection CodeLibrary \\\n  --limit 5 \\\n  --filter language=python\n```\n\nFuture: Hybrid Search\n- Integration with MeiliSearch for phrase matching\n- Reciprocal Rank Fusion (RRF) algorithm\n- Configurable weights (70% semantic, 30% full-text)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-18T10:23:48.550213-07:00","updated_at":"2025-10-18T10:23:48.550213-07:00","dependencies":[{"issue_id":"arcaneum-7","depends_on_id":"arcaneum-1","type":"blocks","created_at":"2025-10-18T10:23:48.55114-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-7","depends_on_id":"arcaneum-2","type":"blocks","created_at":"2025-10-18T10:23:48.551758-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-7","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-18T10:23:48.552365-07:00","created_by":"cwensel"},{"issue_id":"arcaneum-7","depends_on_id":"arcaneum-6","type":"blocks","created_at":"2025-10-18T10:23:48.552956-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-8","title":"Research embedding model flexibility and dynamic caching","description":"Investigate how to support multiple embedding models dynamically with caching. Research FastEmbed, sentence-transformers, and other libraries for on-demand model downloading and caching strategies.","notes":"Research completed. FastEmbed recommended for lightweight, self-contained CLI with automatic caching. Supports stella, bge-large, jina-code models with 1024/768 dimensions.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.083576-07:00","updated_at":"2025-10-19T14:30:51.232552-07:00","closed_at":"2025-10-19T14:30:51.232555-07:00","dependencies":[{"issue_id":"arcaneum-8","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.084942-07:00","created_by":"cwensel"}]}
{"id":"arcaneum-9","title":"Research model token length constraints and optimal chunking","description":"Investigate training token run lengths for embedding models (stella, modernbert, bge-large, jina-code). Determine optimal chunking strategies for Qdrant based on model constraints. Compare with ChromaDB learnings.","notes":"Research completed. Token limits: stella 512-1024, modernbert 8192, bge-large 512, jina-code 8192. Chunk sizes: 460-920 tokens with 10-20% overlap. Store-specific adjustments documented.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-19T14:09:33.14107-07:00","updated_at":"2025-10-19T14:30:51.294451-07:00","closed_at":"2025-10-19T14:30:51.294453-07:00","dependencies":[{"issue_id":"arcaneum-9","depends_on_id":"arcaneum-3","type":"blocks","created_at":"2025-10-19T14:09:33.141919-07:00","created_by":"cwensel"}]}
